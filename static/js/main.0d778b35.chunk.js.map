{"version":3,"sources":["Header/Header.js","Feed/Post/TagList/TagList.js","Feed/Post/Post.js","Feed/Feed.js","Profile/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","Component","TagList","this","props","tags","map","tag","Post","style","width","height","icon","faUserCircle","src","image","alt","likes","faHeart","title","format","unix","created","Feed","state","posts","loading","setState","fetch","then","res","json","sizeUnit","color","size","margin","radius","post","Number","Profile","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0d778b35.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Header.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <a className=\"navbar-brand\" href=\"#\">Instagram</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                        data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\r\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item active\">\r\n                            <Link className=\"nav-link\" to=\"/\">Home <span className=\"sr-only\">(current)</span></Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/profile\" className=\"nav-link\">Profile</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport Post from \"../Post\";\r\nimport './TagList.scss';\r\n\r\nclass TagList extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TagList\">\r\n                {this.props.tags.map(tag => {\r\n                    return <div className=\"tag\"> #{tag}</div>\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TagList;","import React, {Component} from 'react';\r\nimport './Post.scss';\r\nimport TagList from \"./TagList/TagList\";\r\nimport Moment from 'react-moment';\r\nimport {faUserCircle, faHeart} from '@fortawesome/free-solid-svg-icons';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\n\r\n\r\nclass Post extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Post\">\r\n                <div className=\"card\" style={{width: '400px', height: '550px'}}>\r\n                    <header className=\"header\">\r\n                        <span>{this.props.id}</span>\r\n                        <div><FontAwesomeIcon icon={faUserCircle} className=\"icon-user\"/></div>\r\n                    </header>\r\n                    <img src={this.props.image} className=\"card-img-top\" alt=\"#\" />\r\n                        <div className=\"card-body\">\r\n                            <p className=\"card-text\">\r\n                                {this.props.likes} <FontAwesomeIcon icon={faHeart} className=\"icon\"/>\r\n                            </p>\r\n                            <p className=\"card-text-title\">\r\n                                {this.props.title}\r\n                            </p>\r\n                            <TagList tags={this.props.tags} />\r\n                            <small className=\"text-muted\">\r\n                                Last updated\r\n                                <Moment format=\" HH:MM - MMM DD\" unix>{this.props.created}</Moment>\r\n                            </small>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;","import React, {Component} from 'react';\r\nimport './Feed.scss';\r\nimport Post from \"./Post/Post\";\r\nimport FadeLoader from 'react-spinners/FadeLoader';\r\n\r\nclass Feed extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            posts: [],\r\n            loading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({loading: true});\r\n        fetch(\"https://my-json-server.typicode.com/evyros/fake-api/posts\")\r\n            .then(res => res.json())\r\n            .then(posts=>this.setState({posts, loading: false}))\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Feed\">\r\n                <div className=\"loading\">\r\n                    {this.state.loading ?\r\n                        <div>\r\n                            <FadeLoader\r\n                                sizeUnit={\"px\"}\r\n                                color={'#2ebd9e'}\r\n                                size={50}\r\n                                margin={2}\r\n                                height={15}\r\n                                width={5}\r\n                                radius={2}\r\n                                loading={this.state.loading}/>\r\n                            <div>Loading...</div>\r\n                        </div> : null\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"container\">\r\n                    {this.state.posts.map(post => {\r\n                        return (\r\n                                <Post\r\n                                    id={post.id}\r\n                                    created={Number(post.created)}\r\n                                    image={post.image}\r\n                                    title={post.title}\r\n                                    tags={post.tags}\r\n                                    likes={post.likes}\r\n                                />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Feed;","import React, {Component} from 'react';\r\nimport './Profile.scss';\r\n\r\nclass Profile extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Profile\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport './App.scss';\nimport Header from \"./Header/Header\";\nimport Feed from \"./Feed/Feed\";\nimport Profile from \"./Profile/Profile\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n      <Router>\n            <div className=\"App\">\n              <Header />\n              <main>\n                  <Switch>\n                      <Route path=\"/profile\">\n                          <Profile />\n                      </Route>\n                      <Route path=\"/\">\n                          <Feed />\n                      </Route>\n                  </Switch>\n              </main>\n          </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}